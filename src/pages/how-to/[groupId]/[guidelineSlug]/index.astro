---
import type { GetStaticPaths, GetStaticPathsResult } from "astro";

import HowtoLayout from "@/layouts/HowtoLayout.astro";
import {
  formatNormativeContent,
  processKeyTerms,
  resolveInformativeGroups,
  resolveInformativeGuideline,
  resolveInformativeGuidelines,
} from "@/lib/informative";
import { load } from "cheerio";
import KeyTerms from "@/components/how-to/KeyTerms.astro";
import { render } from "astro:content";

export const getStaticPaths: GetStaticPaths = async () => {
  const paths: GetStaticPathsResult = [];
  for (const group of await resolveInformativeGroups()) {
    for (const guideline of await resolveInformativeGuidelines(group.id)) {
      paths.push({
        params: {
          groupId: group.id,
          guidelineSlug: guideline.id.slice(guideline.id.lastIndexOf("/") + 1),
        },
      });
    }
  }
  return paths;
};

const { groupId, guidelineSlug } = Astro.params;
const guidelineId = `${groupId}/${guidelineSlug}`;

const guideline = await resolveInformativeGuideline(guidelineId);
if (!guideline) throw new Error(`Unresolvable informative guideline ID: ${guidelineId}`);
if (!guideline.rendered || !guideline.normativeEntry.rendered) {
  throw new Error(
    `how-to/[group]/[guideline]: Rendered HTML missing for ${guideline.id}; check for Markdown parse failures earlier in log`
  );
}

const normativeHtml = formatNormativeContent(guideline.normativeEntry.rendered);

const { headings } = await render(guideline);
const h2Slugs = headings.filter(({ depth }) => depth === 2).map(({ slug }) => slug);
const goalIndex = h2Slugs.indexOf("goal");
const beforeSlug = goalIndex > -1 ? h2Slugs[goalIndex + 1] : h2Slugs[0];

const { html, terms } = (() => {
  if (beforeSlug) {
    const $ = load(guideline.rendered.html, null, false);
    $(`#${beforeSlug}`).before(normativeHtml);
    return processKeyTerms($.html());
  }
  return processKeyTerms(normativeHtml + guideline.rendered.html);
})();
---

<HowtoLayout
  title={guideline.title}
  breadcrumbSegments={[guideline]}
  nav={{ current: guideline, guideline }}
>
  <Fragment set:html={html} />
  <KeyTerms terms={terms} />
</HowtoLayout>
